{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Response Schema is in production now! Overview This package extends the FastAPI response model schema allowing you to have a common response wrapper via a fastapi.routing.APIRoute . This library supports Python versions >=3.8 and FastAPI versions >=0.66.0 . Getting started Install the package pip install fastapi-responseschema If you are planning to use the pagination integration, you can install the package including fastapi-pagination pip install fastapi-responseschema [ pagination ] Usage from typing import Generic , TypeVar , Any , Optional , List from pydantic import BaseModel from fastapi import FastAPI from fastapi_responseschema import AbstractResponseSchema , SchemaAPIRoute , wrap_app_responses # Build your \"Response Schema\" class ResponseMetadata ( BaseModel ): error : bool message : Optional [ str ] T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T meta : ResponseMetadata @classmethod def from_exception ( cls , reason , status_code , message : str = \"Error\" , ** others ): return cls ( data = reason , meta = ResponseMetadata ( error = status_code >= 400 , message = message ) ) @classmethod def from_api_route ( cls , content : Any , status_code : int , description : Optional [ str ] = None , ** others ): return cls ( data = content , meta = ResponseMetadata ( error = status_code >= 400 , message = description ) ) # Create an APIRoute class Route ( SchemaAPIRoute ): response_schema = ResponseSchema # Integrate in FastAPI app app = FastAPI () wrap_app_responses ( app , Route ) class Item ( BaseModel ): id : int name : str @app . get ( \"/items\" , response_model = List [ Item ], description = \"This is a route\" ) def get_operation (): return [ Item ( id = 1 , name = \"ciao\" ), Item ( id = 2 , name = \"hola\" ), Item ( id = 3 , name = \"hello\" )] Te result of GET /items : HTTP / 1.1 200 OK content-length : 131 content-type : application/json { \"data\" : [ { \"id\" : 1 , \"name\" : \"ciao\" }, { \"id\" : 2 , \"name\" : \"hola\" }, { \"id\" : 3 , \"name\" : \"hello\" } ], \"meta\" : { \"error\" : false , \"message\" : \"This is a route\" } }","title":"Prelude"},{"location":"#overview","text":"This package extends the FastAPI response model schema allowing you to have a common response wrapper via a fastapi.routing.APIRoute . This library supports Python versions >=3.8 and FastAPI versions >=0.66.0 .","title":"Overview"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#install-the-package","text":"pip install fastapi-responseschema If you are planning to use the pagination integration, you can install the package including fastapi-pagination pip install fastapi-responseschema [ pagination ]","title":"Install the package"},{"location":"#usage","text":"from typing import Generic , TypeVar , Any , Optional , List from pydantic import BaseModel from fastapi import FastAPI from fastapi_responseschema import AbstractResponseSchema , SchemaAPIRoute , wrap_app_responses # Build your \"Response Schema\" class ResponseMetadata ( BaseModel ): error : bool message : Optional [ str ] T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T meta : ResponseMetadata @classmethod def from_exception ( cls , reason , status_code , message : str = \"Error\" , ** others ): return cls ( data = reason , meta = ResponseMetadata ( error = status_code >= 400 , message = message ) ) @classmethod def from_api_route ( cls , content : Any , status_code : int , description : Optional [ str ] = None , ** others ): return cls ( data = content , meta = ResponseMetadata ( error = status_code >= 400 , message = description ) ) # Create an APIRoute class Route ( SchemaAPIRoute ): response_schema = ResponseSchema # Integrate in FastAPI app app = FastAPI () wrap_app_responses ( app , Route ) class Item ( BaseModel ): id : int name : str @app . get ( \"/items\" , response_model = List [ Item ], description = \"This is a route\" ) def get_operation (): return [ Item ( id = 1 , name = \"ciao\" ), Item ( id = 2 , name = \"hola\" ), Item ( id = 3 , name = \"hello\" )] Te result of GET /items : HTTP / 1.1 200 OK content-length : 131 content-type : application/json { \"data\" : [ { \"id\" : 1 , \"name\" : \"ciao\" }, { \"id\" : 2 , \"name\" : \"hola\" }, { \"id\" : 3 , \"name\" : \"hello\" } ], \"meta\" : { \"error\" : false , \"message\" : \"This is a route\" } }","title":"Usage"},{"location":"contributing/","text":"How to contribute Just open an issue or submit a pull request on GitHub . While submitting a pull request describe what changes have been made. More info on Docs section Guidelines Try to adhere as much as possible to the Python style and language conventions. Add unit tests for classes and methods. When writing features exposed in API, always add documentation following the Google Style Python docstrings. Enviroment This package is developed using Python version 3.8 . This package uses poetry to handle dependencies, you can install them with: poetry install -E pagination Formatting Black is used to provide code autoformatting e linting. Before committing your changes run black : black . Type checking mypy is used to statically type check the source code. Before committing your changes run mypy : mypy fastapi_responseschema Testing Tests are written using pytest . To run the test suite just type in your terminal: pytest This will generate the coverage in html format in a root level directory htmlcov . Documentation Documentation is built using pydoc-markdown . To run the documentation dev server: novella -d docs --serve To build the docs: novella -d docs","title":"Contibuting"},{"location":"contributing/#how-to-contribute","text":"Just open an issue or submit a pull request on GitHub . While submitting a pull request describe what changes have been made. More info on Docs section","title":"How to contribute"},{"location":"contributing/#guidelines","text":"Try to adhere as much as possible to the Python style and language conventions. Add unit tests for classes and methods. When writing features exposed in API, always add documentation following the Google Style Python docstrings.","title":"Guidelines"},{"location":"contributing/#enviroment","text":"This package is developed using Python version 3.8 . This package uses poetry to handle dependencies, you can install them with: poetry install -E pagination","title":"Enviroment"},{"location":"contributing/#formatting","text":"Black is used to provide code autoformatting e linting. Before committing your changes run black : black .","title":"Formatting"},{"location":"contributing/#type-checking","text":"mypy is used to statically type check the source code. Before committing your changes run mypy : mypy fastapi_responseschema","title":"Type checking"},{"location":"contributing/#testing","text":"Tests are written using pytest . To run the test suite just type in your terminal: pytest This will generate the coverage in html format in a root level directory htmlcov .","title":"Testing"},{"location":"contributing/#documentation","text":"Documentation is built using pydoc-markdown . To run the documentation dev server: novella -d docs --serve To build the docs: novella -d docs","title":"Documentation"},{"location":"api/exceptions/","text":"Exceptions ( fastapi_responseschema.exceptions ) Class BaseGenericHTTPException class BaseGenericHTTPException ( FastAPIHTTPException ) [view_source] BaseClass for HTTPExceptions with additional data __init__ def __init__ ( detail : Any = None , headers : Optional [ Dict [ str , Any ]] = None , ** extra_params : Any ) -> None [view_source] Instances can be initialized with a set of extra params. Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class GenericHTTPException class GenericHTTPException ( BaseGenericHTTPException ) [view_source] HTTP exception with extra data __init__ def __init__ ( status_code : int , detail : Any = None , headers : Optional [ Dict [ str , Any ]] = None , ** extra_params : Any ) -> None [view_source] Used to raise custom exceptions with extra params. Arguments : status_code int - Exception status code. detail Any, optional - Error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - Error response data. Defaults to None. Class BadRequest class BadRequest ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 400 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class Unauthorized class Unauthorized ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 401 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class Forbidden class Forbidden ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 403 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class NotFound class NotFound ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 404 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class MethodNotAllowed class MethodNotAllowed ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 405 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class Conflict class Conflict ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 409 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class Gone class Gone ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 410 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class UnprocessableEntity class UnprocessableEntity ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 422 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None. Class InternalServerError class InternalServerError ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 500 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Exceptions"},{"location":"api/exceptions/#exceptions-fastapi_responseschemaexceptions","text":"","title":"Exceptions (fastapi_responseschema.exceptions)"},{"location":"api/exceptions/#class-basegenerichttpexception","text":"class BaseGenericHTTPException ( FastAPIHTTPException ) [view_source] BaseClass for HTTPExceptions with additional data","title":"Class BaseGenericHTTPException"},{"location":"api/exceptions/#__init__","text":"def __init__ ( detail : Any = None , headers : Optional [ Dict [ str , Any ]] = None , ** extra_params : Any ) -> None [view_source] Instances can be initialized with a set of extra params. Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"__init__"},{"location":"api/exceptions/#class-generichttpexception","text":"class GenericHTTPException ( BaseGenericHTTPException ) [view_source] HTTP exception with extra data","title":"Class GenericHTTPException"},{"location":"api/exceptions/#__init___1","text":"def __init__ ( status_code : int , detail : Any = None , headers : Optional [ Dict [ str , Any ]] = None , ** extra_params : Any ) -> None [view_source] Used to raise custom exceptions with extra params. Arguments : status_code int - Exception status code. detail Any, optional - Error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - Error response data. Defaults to None.","title":"__init__"},{"location":"api/exceptions/#class-badrequest","text":"class BadRequest ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 400 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class BadRequest"},{"location":"api/exceptions/#class-unauthorized","text":"class Unauthorized ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 401 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class Unauthorized"},{"location":"api/exceptions/#class-forbidden","text":"class Forbidden ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 403 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class Forbidden"},{"location":"api/exceptions/#class-notfound","text":"class NotFound ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 404 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class NotFound"},{"location":"api/exceptions/#class-methodnotallowed","text":"class MethodNotAllowed ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 405 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class MethodNotAllowed"},{"location":"api/exceptions/#class-conflict","text":"class Conflict ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 409 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class Conflict"},{"location":"api/exceptions/#class-gone","text":"class Gone ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 410 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class Gone"},{"location":"api/exceptions/#class-unprocessableentity","text":"class UnprocessableEntity ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 422 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class UnprocessableEntity"},{"location":"api/exceptions/#class-internalservererror","text":"class InternalServerError ( BaseGenericHTTPException ) [view_source] Raises with HTTP status 500 Arguments : detail Any, optional - The error response content. Defaults to None. headers Optional[Dict[str, Any]], optional - A set of headers to be returned in the response. Defaults to None.","title":"Class InternalServerError"},{"location":"api/helpers/","text":"Helpers ( fastapi_responseschema.helpers ) wrap_error_responses def wrap_error_responses ( app : FastAPI , error_response_schema : Type [ AbstractResponseSchema ]) -> FastAPI [view_source] Wraps all exception handlers with the provided response schema. Arguments : app FastAPI - A FastAPI application instance. error_response_schema Type[AbstractResponseSchema] - Response schema wrapper model. Returns : FastAPI - The application instance wrap_app_responses def wrap_app_responses ( app : FastAPI , route_class : Type [ SchemaAPIRoute ]) -> FastAPI [view_source] Wraps all app defaults responses Arguments : app FastAPI - A FastAPI application instance. route_class Type[SchemaAPIRoute] - The SchemaAPIRoute with your response schemas. Returns : FastAPI - The application instance.","title":"Helpers"},{"location":"api/helpers/#helpers-fastapi_responseschemahelpers","text":"","title":"Helpers (fastapi_responseschema.helpers)"},{"location":"api/helpers/#wrap_error_responses","text":"def wrap_error_responses ( app : FastAPI , error_response_schema : Type [ AbstractResponseSchema ]) -> FastAPI [view_source] Wraps all exception handlers with the provided response schema. Arguments : app FastAPI - A FastAPI application instance. error_response_schema Type[AbstractResponseSchema] - Response schema wrapper model. Returns : FastAPI - The application instance","title":"wrap_error_responses"},{"location":"api/helpers/#wrap_app_responses","text":"def wrap_app_responses ( app : FastAPI , route_class : Type [ SchemaAPIRoute ]) -> FastAPI [view_source] Wraps all app defaults responses Arguments : app FastAPI - A FastAPI application instance. route_class Type[SchemaAPIRoute] - The SchemaAPIRoute with your response schemas. Returns : FastAPI - The application instance.","title":"wrap_app_responses"},{"location":"api/interfaces/","text":"Interfaces ( fastapi_responseschema.interfaces ) Class AbstractResponseSchema class AbstractResponseSchema ( GenericModel , Generic [ T ], ABC ) [view_source] Abstract generic model for building response schema interfaces. from_api_route @classmethod @abstractmethod def from_api_route ( cls : Type [ TResponseSchema ], content : T , path : str , status_code : int , response_model : Optional [ Type [ BaseModel ]] = None , tags : Optional [ List [ str ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , response_description : str = \"Successful Response\" , deprecated : Optional [ bool ] = None , name : Optional [ str ] = None , methods : Optional [ Union [ Set [ str ], List [ str ]]] = None , operation_id : Optional [ str ] = None , response_model_include : Optional [ Union [ SetIntStr , DictIntStrAny ]] = None , response_model_exclude : Optional [ Union [ SetIntStr , DictIntStrAny ]] = None , response_model_by_alias : bool = True , response_model_exclude_unset : bool = False , response_model_exclude_defaults : bool = False , response_model_exclude_none : bool = False , include_in_schema : bool = True , response_class : Optional [ Type [ Response ]] = None , ** extra_params : Any ) -> TResponseSchema [view_source] Builds an instance of response model from an API Route constructor. This method must be overridden by subclasses. Arguments : content Any - The response content. path str - Response path info. status_code int - response status code. response_model Optional[Type[BaseModel]], optional - The route response model. Defaults to None. tags Optional[List[str]], optional - OpenAPI Tags configured in the API Route. Defaults to None. summary Optional[str], optional - OpenAPI Summary. Defaults to None. description Optional[str], optional - OpenAPI description. Defaults to None. response_description str, optional - A string describing the response. Defaults to \"Successful Response\". deprecated Optional[bool], optional - OpenAPI deprecation flag. Defaults to None. name Optional[str], optional - Operation name. Defaults to None. methods Optional[Union[Set[str], List[str]]], optional - supoported methods. Defaults to None. operation_id Optional[str], optional - OpenAPI operation ID. Defaults to None. response_model_include Optional[Union[SetIntStr, DictIntStrAny]], optional - response_model Included fields. Defaults to None. response_model_exclude Optional[Union[SetIntStr, DictIntStrAny]], optional - response_model Excluded fields. Defaults to None. response_model_by_alias bool, optional - Enable or disable field aliases in response_model . Defaults to True. response_model_exclude_unset bool, optional - excludes unset values in response_model . Defaults to False. response_model_exclude_defaults bool, optional - excludes default values in response_model . Defaults to False. response_model_exclude_none bool, optional - excludes None values in response_model . Defaults to False. include_in_schema bool, optional - wether or not include this operation in the OpenAPI Schema. Defaults to True. response_class Optional[Type[Response]], optional - FastaAPI/Starlette Response Class. Defaults to None. Returns : TResponseSchema - A ResponseSchema instance from_exception @classmethod @abstractmethod def from_exception ( cls : Type [ TResponseSchema ], request : Request , reason : T , status_code : int , headers : Optional [ dict ] = None , ** extra_params : Any ) -> TResponseSchema [view_source] Builds a ResponseSchema instance from an exception. This method must be overridden by subclasses. Arguments : request Request - A FastaAPI/Starlette Request. reason str - The Exception description or response data. status_code int - the response status code. headers dict - the response_headers Returns : TResponseSchema - A ResponseSchema instance from_exception_handler @classmethod def from_exception_handler ( cls : Type [ TResponseSchema ], request : Request , exception : Union [ RequestValidationError , StarletteHTTPException , FastAPIHTTPException , BaseGenericHTTPException ] ) -> TResponseSchema [view_source] Used in exception handlers to build a ResponseSchema instance. This method should not be overridden by subclasses. Arguments : request Request - A FastaAPI/Starlette Request. exception Union[RequestValidationError, StarletteHTTPException, FastAPIHTTPException, BaseGenericHTTPException] - The instantiated raised exception. Returns : TResponseSchema - A ResponseSchema instance Class ResponseWithMetadata class ResponseWithMetadata ( NamedTuple ) [view_source] This Interface wraps the response content with the additional metadata Arguments : metadata dict - A dictionary containing the metadata fields. response_content Optional[Any] - The content of the response. Default to None.","title":"Interfaces"},{"location":"api/interfaces/#interfaces-fastapi_responseschemainterfaces","text":"","title":"Interfaces (fastapi_responseschema.interfaces)"},{"location":"api/interfaces/#class-abstractresponseschema","text":"class AbstractResponseSchema ( GenericModel , Generic [ T ], ABC ) [view_source] Abstract generic model for building response schema interfaces.","title":"Class AbstractResponseSchema"},{"location":"api/interfaces/#from_api_route","text":"@classmethod @abstractmethod def from_api_route ( cls : Type [ TResponseSchema ], content : T , path : str , status_code : int , response_model : Optional [ Type [ BaseModel ]] = None , tags : Optional [ List [ str ]] = None , summary : Optional [ str ] = None , description : Optional [ str ] = None , response_description : str = \"Successful Response\" , deprecated : Optional [ bool ] = None , name : Optional [ str ] = None , methods : Optional [ Union [ Set [ str ], List [ str ]]] = None , operation_id : Optional [ str ] = None , response_model_include : Optional [ Union [ SetIntStr , DictIntStrAny ]] = None , response_model_exclude : Optional [ Union [ SetIntStr , DictIntStrAny ]] = None , response_model_by_alias : bool = True , response_model_exclude_unset : bool = False , response_model_exclude_defaults : bool = False , response_model_exclude_none : bool = False , include_in_schema : bool = True , response_class : Optional [ Type [ Response ]] = None , ** extra_params : Any ) -> TResponseSchema [view_source] Builds an instance of response model from an API Route constructor. This method must be overridden by subclasses. Arguments : content Any - The response content. path str - Response path info. status_code int - response status code. response_model Optional[Type[BaseModel]], optional - The route response model. Defaults to None. tags Optional[List[str]], optional - OpenAPI Tags configured in the API Route. Defaults to None. summary Optional[str], optional - OpenAPI Summary. Defaults to None. description Optional[str], optional - OpenAPI description. Defaults to None. response_description str, optional - A string describing the response. Defaults to \"Successful Response\". deprecated Optional[bool], optional - OpenAPI deprecation flag. Defaults to None. name Optional[str], optional - Operation name. Defaults to None. methods Optional[Union[Set[str], List[str]]], optional - supoported methods. Defaults to None. operation_id Optional[str], optional - OpenAPI operation ID. Defaults to None. response_model_include Optional[Union[SetIntStr, DictIntStrAny]], optional - response_model Included fields. Defaults to None. response_model_exclude Optional[Union[SetIntStr, DictIntStrAny]], optional - response_model Excluded fields. Defaults to None. response_model_by_alias bool, optional - Enable or disable field aliases in response_model . Defaults to True. response_model_exclude_unset bool, optional - excludes unset values in response_model . Defaults to False. response_model_exclude_defaults bool, optional - excludes default values in response_model . Defaults to False. response_model_exclude_none bool, optional - excludes None values in response_model . Defaults to False. include_in_schema bool, optional - wether or not include this operation in the OpenAPI Schema. Defaults to True. response_class Optional[Type[Response]], optional - FastaAPI/Starlette Response Class. Defaults to None. Returns : TResponseSchema - A ResponseSchema instance","title":"from_api_route"},{"location":"api/interfaces/#from_exception","text":"@classmethod @abstractmethod def from_exception ( cls : Type [ TResponseSchema ], request : Request , reason : T , status_code : int , headers : Optional [ dict ] = None , ** extra_params : Any ) -> TResponseSchema [view_source] Builds a ResponseSchema instance from an exception. This method must be overridden by subclasses. Arguments : request Request - A FastaAPI/Starlette Request. reason str - The Exception description or response data. status_code int - the response status code. headers dict - the response_headers Returns : TResponseSchema - A ResponseSchema instance","title":"from_exception"},{"location":"api/interfaces/#from_exception_handler","text":"@classmethod def from_exception_handler ( cls : Type [ TResponseSchema ], request : Request , exception : Union [ RequestValidationError , StarletteHTTPException , FastAPIHTTPException , BaseGenericHTTPException ] ) -> TResponseSchema [view_source] Used in exception handlers to build a ResponseSchema instance. This method should not be overridden by subclasses. Arguments : request Request - A FastaAPI/Starlette Request. exception Union[RequestValidationError, StarletteHTTPException, FastAPIHTTPException, BaseGenericHTTPException] - The instantiated raised exception. Returns : TResponseSchema - A ResponseSchema instance","title":"from_exception_handler"},{"location":"api/interfaces/#class-responsewithmetadata","text":"class ResponseWithMetadata ( NamedTuple ) [view_source] This Interface wraps the response content with the additional metadata Arguments : metadata dict - A dictionary containing the metadata fields. response_content Optional[Any] - The content of the response. Default to None.","title":"Class ResponseWithMetadata"},{"location":"api/pagination-integration/","text":"Pagination Integration ( fastapi_responseschema.integrations.pagination ) Class AbstractPagedResponseSchema class AbstractPagedResponseSchema ( AbstractPage [ T ], AbstractResponseSchema [ T ], Generic [ T ]) [view_source] Abstract generic model for building response schema interfaces with pagination logic. Class PagedSchemaAPIRoute class PagedSchemaAPIRoute ( SchemaAPIRoute ) [view_source] A SchemaAPIRoute class with pagination support. Must be subclassed setting at least SchemaAPIRoute.response_model. Usage: from typing import Generic, TypeVar from fastapi_responseschema.integrations.pagination import AbstractPagedResponseSchema T = TypeVar(\"T\") class MyResponseSchema(AbstractPagedResponseSchema[T], Generic[T]): ... class MyAPIRoute(SchemaPagedAPIRoute): response_schema = MyResponseSchema paged_response_schema = MyResponseSchema from fastapi import APIRouter router = APIRouter(route_class=MyAPIRoute) Class PaginationMetadata class PaginationMetadata ( BaseModel ) [view_source] Pagination metadata model for pagination info. Arguments : total int - Total number of items. page_size int - Number of items per page. page int - Page number. links dict - Object containing pagination links. from_abstract_page_create @classmethod def from_abstract_page_create ( cls , total : int , params : SupportedParams ) -> \"PaginationMetadata\" [view_source] Create pagination metadata from an abstract page. Arguments : total int - Total number of items. params SupportedParams - A FastaAPI Pagination Params instance. Returns : PaginationMetadata - PaginationMetadata instance Class PaginationParams class PaginationParams ( BaseModel , AbstractParams ) [view_source] Pagination Querystring parameters Arguments : page int - The page number. page_size int - Number of items per page.","title":"Pagination Integration"},{"location":"api/pagination-integration/#pagination-integration-fastapi_responseschemaintegrationspagination","text":"","title":"Pagination Integration (fastapi_responseschema.integrations.pagination)"},{"location":"api/pagination-integration/#class-abstractpagedresponseschema","text":"class AbstractPagedResponseSchema ( AbstractPage [ T ], AbstractResponseSchema [ T ], Generic [ T ]) [view_source] Abstract generic model for building response schema interfaces with pagination logic.","title":"Class AbstractPagedResponseSchema"},{"location":"api/pagination-integration/#class-pagedschemaapiroute","text":"class PagedSchemaAPIRoute ( SchemaAPIRoute ) [view_source] A SchemaAPIRoute class with pagination support. Must be subclassed setting at least SchemaAPIRoute.response_model. Usage: from typing import Generic, TypeVar from fastapi_responseschema.integrations.pagination import AbstractPagedResponseSchema T = TypeVar(\"T\") class MyResponseSchema(AbstractPagedResponseSchema[T], Generic[T]): ... class MyAPIRoute(SchemaPagedAPIRoute): response_schema = MyResponseSchema paged_response_schema = MyResponseSchema from fastapi import APIRouter router = APIRouter(route_class=MyAPIRoute)","title":"Class PagedSchemaAPIRoute"},{"location":"api/pagination-integration/#class-paginationmetadata","text":"class PaginationMetadata ( BaseModel ) [view_source] Pagination metadata model for pagination info. Arguments : total int - Total number of items. page_size int - Number of items per page. page int - Page number. links dict - Object containing pagination links.","title":"Class PaginationMetadata"},{"location":"api/pagination-integration/#from_abstract_page_create","text":"@classmethod def from_abstract_page_create ( cls , total : int , params : SupportedParams ) -> \"PaginationMetadata\" [view_source] Create pagination metadata from an abstract page. Arguments : total int - Total number of items. params SupportedParams - A FastaAPI Pagination Params instance. Returns : PaginationMetadata - PaginationMetadata instance","title":"from_abstract_page_create"},{"location":"api/pagination-integration/#class-paginationparams","text":"class PaginationParams ( BaseModel , AbstractParams ) [view_source] Pagination Querystring parameters Arguments : page int - The page number. page_size int - Number of items per page.","title":"Class PaginationParams"},{"location":"api/routing/","text":"Exceptions ( fastapi_responseschema.routing ) Class SchemaAPIRoute class SchemaAPIRoute ( APIRoute ) [view_source] An APIRoute class to wrap response_model(s) with a ResponseSchema Must be subclassed setting at least SchemaAPIRoute.response_model. Usage: from typing import Generic, TypeVar from fastapi_responseschema.interfaces import AbstractResponseSchema T = TypeVar(\"T\") class MyResponseSchema(AbstractResponseSchema[T], Generic[T]): ... class MyAPIRoute(SchemaAPIRoute): response_schema = MyResponseSchema from fastapi import APIRouter router = APIRouter(route_class=MyAPIRoute) is_error_state def is_error_state ( status_code : Optional [ int ] = None ) -> bool [view_source] Handles the error_state for the operation evaluating the status_code. This method gets called internally and can be overridden to modify the error state of the operation. Arguments : status_code Optional[int], optional - Operation status code. Defaults to None. Returns : bool - wether or not the operation returns an error get_wrapper_model def get_wrapper_model ( is_error : bool , response_model : Type [ Any ]) -> Type [ AbstractResponseSchema [ Any ]] [view_source] Implements the ResponseSchema selection logic. This method gets called internally and can be overridden to gain control over the ResponseSchema selection logic. Arguments : is_error int - wheteher or not the operation returns an error. response_model Type[Any] - response_model set for APIRoute. Returns : Type[AbstractResponseSchema[Any]] - The ResponseSchema to wrap the response_model. override_response_model def override_response_model ( wrapper_model : Type [ AbstractResponseSchema [ Any ]], response_model : Type [ Any ]) -> Type [ AbstractResponseSchema [ Any ]] [view_source] Wraps the given response_model with the ResponseSchema. This method gets called internally and can be overridden to gain control over the response_model wrapping logic. Arguments : wrapper_model Type[AbstractResponseSchema[Any]] - ResponseSchema Model response_model Type[Any] - response_model set for APIRoute response_model_include Optional[Union[SetIntStr, DictIntStrAny]], optional - Pydantic BaseModel include. Defaults to None. response_model_exclude Optional[Union[SetIntStr, DictIntStrAny]], optional - Pydantic BaseModel exclude. Defaults to None. Returns : Type[AbstractResponseSchema[Any]] - The response_model wrapped in response_schema respond def respond ( response_content : Optional [ Any ] = None , ** metadata : Any ) -> ResponseWithMetadata [view_source] Returns the response content with optional metadata Arguments : response_content Optional[Any], optional - Response Content. Defaults to None. **metadata - Arbitrary metadata Returns : ResponseWithMetadata - An intermediate data structure to add metadatato a ResponseSchema serialization","title":"Routing"},{"location":"api/routing/#exceptions-fastapi_responseschemarouting","text":"","title":"Exceptions (fastapi_responseschema.routing)"},{"location":"api/routing/#class-schemaapiroute","text":"class SchemaAPIRoute ( APIRoute ) [view_source] An APIRoute class to wrap response_model(s) with a ResponseSchema Must be subclassed setting at least SchemaAPIRoute.response_model. Usage: from typing import Generic, TypeVar from fastapi_responseschema.interfaces import AbstractResponseSchema T = TypeVar(\"T\") class MyResponseSchema(AbstractResponseSchema[T], Generic[T]): ... class MyAPIRoute(SchemaAPIRoute): response_schema = MyResponseSchema from fastapi import APIRouter router = APIRouter(route_class=MyAPIRoute)","title":"Class SchemaAPIRoute"},{"location":"api/routing/#is_error_state","text":"def is_error_state ( status_code : Optional [ int ] = None ) -> bool [view_source] Handles the error_state for the operation evaluating the status_code. This method gets called internally and can be overridden to modify the error state of the operation. Arguments : status_code Optional[int], optional - Operation status code. Defaults to None. Returns : bool - wether or not the operation returns an error","title":"is_error_state"},{"location":"api/routing/#get_wrapper_model","text":"def get_wrapper_model ( is_error : bool , response_model : Type [ Any ]) -> Type [ AbstractResponseSchema [ Any ]] [view_source] Implements the ResponseSchema selection logic. This method gets called internally and can be overridden to gain control over the ResponseSchema selection logic. Arguments : is_error int - wheteher or not the operation returns an error. response_model Type[Any] - response_model set for APIRoute. Returns : Type[AbstractResponseSchema[Any]] - The ResponseSchema to wrap the response_model.","title":"get_wrapper_model"},{"location":"api/routing/#override_response_model","text":"def override_response_model ( wrapper_model : Type [ AbstractResponseSchema [ Any ]], response_model : Type [ Any ]) -> Type [ AbstractResponseSchema [ Any ]] [view_source] Wraps the given response_model with the ResponseSchema. This method gets called internally and can be overridden to gain control over the response_model wrapping logic. Arguments : wrapper_model Type[AbstractResponseSchema[Any]] - ResponseSchema Model response_model Type[Any] - response_model set for APIRoute response_model_include Optional[Union[SetIntStr, DictIntStrAny]], optional - Pydantic BaseModel include. Defaults to None. response_model_exclude Optional[Union[SetIntStr, DictIntStrAny]], optional - Pydantic BaseModel exclude. Defaults to None. Returns : Type[AbstractResponseSchema[Any]] - The response_model wrapped in response_schema","title":"override_response_model"},{"location":"api/routing/#respond","text":"def respond ( response_content : Optional [ Any ] = None , ** metadata : Any ) -> ResponseWithMetadata [view_source] Returns the response content with optional metadata Arguments : response_content Optional[Any], optional - Response Content. Defaults to None. **metadata - Arbitrary metadata Returns : ResponseWithMetadata - An intermediate data structure to add metadatato a ResponseSchema serialization","title":"respond"},{"location":"guide/pagination-integration/","text":"FastAPI Response Schema integrates with FastAPI Pagination to handle pagination logic without reinventig the wheel. However, you can implement your own pagination utilities and integrate them with FastaAPI Response Schema. PagedResponseSchema A PagedResponseSchema is a generic that inherits from fastapi_pagination.base.AbstractPage and fastapi_responseschema.interfaces.AbstractResponseSchema . You can use this type of classes to handle pagination with a global response schema logic. from typing import Sequence , TypeVar , Any , Generic , Union from fastapi_responseschema.integrations.pagination import AbstractPagedResponseSchema , PaginationMetadata , PagedSchemaAPIRoute , PaginationParams class ResponseMetadata ( BaseModel ): error : bool message : Optional [ str ] pagination : Optional [ PaginationMetadata ] T = TypeVar ( \"T\" ) class PagedResponseSchema ( AbstractPagedResponseSchema [ T ], Generic [ T ]): data : Union [ Sequence [ T ], T ] # In case of error response we will pass a scalar type, a string or a dict meta : ResponseMetadata @classmethod def create ( cls , items : Sequence [ T ], total : int , params : PaginationParams , ): # This constructor gets called first and creates the FastAPI Pagination response model. # For fields that are not present in this method signature just set some defaults, # you will override them in the `from_api_route` constructor return cls ( data = items , meta = ResponseMetadata ( error = False , pagination = PaginationMetadata . from_abstract_page_create ( total = total , params = params ) ) ) @classmethod def from_exception ( cls , reason : T , status_code : int , ** others ): return cls ( data = reason , meta = ResponseMetadata ( error = status_code >= 400 , message = message ) ) @classmethod def from_api_route ( cls , content : Sequence [ T ], description : Optional [ str ] = None , ** others ): # `content` parameter is the output from the `create` constructor. return cls ( error = status_code >= 400 , data = content . data , meta = content . meta ) PagedSchemaAPIRoute This is a SchemaAPIRoute that supports a PagedResponseSchema for paginated responses. from fastapi_responseschema.integrations.pagination import PagedSchemaAPIRoute ... class PagedRoute ( PagedSchemaAPIRoute ): response_schema = ResponseSchema paged_response_schema = PagedResponseSchema This PagedSchemaAPIRoute can be integrated in fastapi as a SchemaAPIRoute . Usage The AbstractPagedResponseSchema class inherits from the fastapi_pagination.bases.AbstractPage and has to be used to configure the pagination correctly. from pydantic import BaseModel from fastapi import FastAPI from fastapi_pagination import paginate , add_pagination from fastapi_responseschema import wrap_app_responses from .myroutes import PagedRoute # the SchemaAPIRoute you defined from .myschemas import PagedResponseSchema # the ResponseSchema you defined app = FastAPI () wrap_app_responses ( app , route_class = PagedRoute ) class Bird ( BaseModel ): id : int @app . get ( \"/birds\" , response_model = PagedResponseSchema [ Bird ]) def list_birds_w_pagination (): return paginate ([ Bird ( id = n ) for n in range ( 1 , 3000 )]) add_pagination ( app ) PaginationParams and PaginationMetadata Just take a look at the API documentation to learn more about.","title":"Pagination Integration"},{"location":"guide/pagination-integration/#pagedresponseschema","text":"A PagedResponseSchema is a generic that inherits from fastapi_pagination.base.AbstractPage and fastapi_responseschema.interfaces.AbstractResponseSchema . You can use this type of classes to handle pagination with a global response schema logic. from typing import Sequence , TypeVar , Any , Generic , Union from fastapi_responseschema.integrations.pagination import AbstractPagedResponseSchema , PaginationMetadata , PagedSchemaAPIRoute , PaginationParams class ResponseMetadata ( BaseModel ): error : bool message : Optional [ str ] pagination : Optional [ PaginationMetadata ] T = TypeVar ( \"T\" ) class PagedResponseSchema ( AbstractPagedResponseSchema [ T ], Generic [ T ]): data : Union [ Sequence [ T ], T ] # In case of error response we will pass a scalar type, a string or a dict meta : ResponseMetadata @classmethod def create ( cls , items : Sequence [ T ], total : int , params : PaginationParams , ): # This constructor gets called first and creates the FastAPI Pagination response model. # For fields that are not present in this method signature just set some defaults, # you will override them in the `from_api_route` constructor return cls ( data = items , meta = ResponseMetadata ( error = False , pagination = PaginationMetadata . from_abstract_page_create ( total = total , params = params ) ) ) @classmethod def from_exception ( cls , reason : T , status_code : int , ** others ): return cls ( data = reason , meta = ResponseMetadata ( error = status_code >= 400 , message = message ) ) @classmethod def from_api_route ( cls , content : Sequence [ T ], description : Optional [ str ] = None , ** others ): # `content` parameter is the output from the `create` constructor. return cls ( error = status_code >= 400 , data = content . data , meta = content . meta )","title":"PagedResponseSchema"},{"location":"guide/pagination-integration/#pagedschemaapiroute","text":"This is a SchemaAPIRoute that supports a PagedResponseSchema for paginated responses. from fastapi_responseschema.integrations.pagination import PagedSchemaAPIRoute ... class PagedRoute ( PagedSchemaAPIRoute ): response_schema = ResponseSchema paged_response_schema = PagedResponseSchema This PagedSchemaAPIRoute can be integrated in fastapi as a SchemaAPIRoute .","title":"PagedSchemaAPIRoute"},{"location":"guide/pagination-integration/#usage","text":"The AbstractPagedResponseSchema class inherits from the fastapi_pagination.bases.AbstractPage and has to be used to configure the pagination correctly. from pydantic import BaseModel from fastapi import FastAPI from fastapi_pagination import paginate , add_pagination from fastapi_responseschema import wrap_app_responses from .myroutes import PagedRoute # the SchemaAPIRoute you defined from .myschemas import PagedResponseSchema # the ResponseSchema you defined app = FastAPI () wrap_app_responses ( app , route_class = PagedRoute ) class Bird ( BaseModel ): id : int @app . get ( \"/birds\" , response_model = PagedResponseSchema [ Bird ]) def list_birds_w_pagination (): return paginate ([ Bird ( id = n ) for n in range ( 1 , 3000 )]) add_pagination ( app )","title":"Usage"},{"location":"guide/pagination-integration/#paginationparams-and-paginationmetadata","text":"Just take a look at the API documentation to learn more about.","title":"PaginationParams and PaginationMetadata"},{"location":"guide/routing/","text":"Once you have created your response schemas you can define the SchemaAPIRoute that will be used for your API set. A SchemaAPIRoute just inherits from fastapi.routing.APIRoute . from fastapi_responseschema import SchemaAPIRoute from .myschemas import StandardResponseSchema # The response schema you defined class StandardAPIRoute ( SchemaAPIRoute ): response_schema = StandardResponseSchema # This attribute is required If you want to handle different schemas for success and error responses you can set the error response schema. from fastapi_responseschema import SchemaAPIRoute from .myschemas import OKResponseSchema , KOResponseSchema # The response schemas you defined class StandardAPIRoute ( SchemaAPIRoute ): response_schema = OKResponseSchema # This attribute is required error_response_schema = KOResponseSchema # If not set defaults to `SchemaAPIRoute.response_schema` Integrating in your API You can set the defined SchemaAPIRoute in you FastAPI application. from fastapi import FastAPI from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined app = FastAPI () app . router . route_class = StandardAPIRoute @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" } You can even integrate the schema api route in APIRouter . from pydantic import BaseModel from fastapi import APIRouter from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined router = APIRouter ( route_class = StandardAPIRoute ) class ParrotMessage ( BaseModel ): message : str @router . post ( \"/parrot\" ) def repeat ( body : ParrotMessage ): return { \"parrot_says\" : body . message } Handling errors You can wrap all error responses with the wrap_error_responses helper. from fastapi import FastAPI from fastapi_responseschema import wrap_error_responses from .myroutes import StandardAPIRoute from .myschemas import KOResponseSchema app = FastAPI () app . router . route_class = StandardAPIRoute wrap_error_responses ( app , error_response_schema = KOResponseSchema ) @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" } Handling errors and override application APIRoute The same functionality as: ... app . router . route_class = StandardAPIRoute wrap_error_responses ( app , error_response_schema = KOResponseSchema ) ... Can be achieved with wrap_app_responses : from fastapi import FastAPI from fastapi_responseschema import wrap_app_responses from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined app = FastAPI () wrap_app_responses ( app , route_class = StandardAPIRoute ) @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" } You still need to configure the route class for every fastapi.APIRouter . About response_model_exclude , response_model_include and others response_model_* parametrs When using response fields modifiers on-the-fly. you must consider that the final output of response_model will be wrapped by the configured ResponseSchema. For this snippet: from typing import TypeVar , Generic from pydantic import BaseModel from fastapi import APIRouter from fastapi_responseschema import AbstractResponseSchema , SchemaAPIRoute T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool message : Optional [ str ] ... # constructors etc. class Item ( BaseModel ): id : int name : str additional_desc : Optional [ str ] class MainAPIRoute ( SchemaAPIRoute ): response_schema = ResponseSchema router = APIRouter ( route_class = MainAPIRoute ) @router . get ( \"/item\" , response_model = Item ) def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } The resulting response payload of GET /items will be: { \"data\" : { \"id\" : 11 , \"name\" : \"Just a Teapot!\" , \"additional_desc\" : null }, \"error\" : false , \"message\" : null } When applying the response_model_exclude and additional_model_include for the response_model remeber to consider the nested output. For Example: ... @router . get ( \"/item\" , response_model = Item , response_model_exclude = { \"data\" : { \"name\" }}) # Exclusion of nested fields def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } Returns: { \"data\" : { \"id\" : 11 , \"additional_desc\" : null }, \"error\" : false , \"message\" : null } When you use response_model_exclude_none and similar parameters the configuration will be applyed to all the response schema. For example: ... @router . get ( \"/item\" , response_model = Item , response_model_exclude_none = True ) # Exclusion of nested fields def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } Returns: { \"data\" : { \"id\" : 11 , \"name\" : \"Just a Teapot!\" }, \"error\" : false } To modify the response content you should prefer the definition of dedicated models.","title":"Routing"},{"location":"guide/routing/#integrating-in-your-api","text":"You can set the defined SchemaAPIRoute in you FastAPI application. from fastapi import FastAPI from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined app = FastAPI () app . router . route_class = StandardAPIRoute @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" } You can even integrate the schema api route in APIRouter . from pydantic import BaseModel from fastapi import APIRouter from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined router = APIRouter ( route_class = StandardAPIRoute ) class ParrotMessage ( BaseModel ): message : str @router . post ( \"/parrot\" ) def repeat ( body : ParrotMessage ): return { \"parrot_says\" : body . message }","title":"Integrating in your API"},{"location":"guide/routing/#handling-errors","text":"You can wrap all error responses with the wrap_error_responses helper. from fastapi import FastAPI from fastapi_responseschema import wrap_error_responses from .myroutes import StandardAPIRoute from .myschemas import KOResponseSchema app = FastAPI () app . router . route_class = StandardAPIRoute wrap_error_responses ( app , error_response_schema = KOResponseSchema ) @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" }","title":"Handling errors"},{"location":"guide/routing/#handling-errors-and-override-application-apiroute","text":"The same functionality as: ... app . router . route_class = StandardAPIRoute wrap_error_responses ( app , error_response_schema = KOResponseSchema ) ... Can be achieved with wrap_app_responses : from fastapi import FastAPI from fastapi_responseschema import wrap_app_responses from .myroutes import StandardAPIRoute # the SchemaAPIRoute you defined app = FastAPI () wrap_app_responses ( app , route_class = StandardAPIRoute ) @app . get ( \"/\" ) def just_a_route (): return { \"message\" : \"It Works!\" } You still need to configure the route class for every fastapi.APIRouter .","title":"Handling errors and override application APIRoute"},{"location":"guide/routing/#about-response_model_exclude-response_model_include-and-others-response_model_-parametrs","text":"When using response fields modifiers on-the-fly. you must consider that the final output of response_model will be wrapped by the configured ResponseSchema. For this snippet: from typing import TypeVar , Generic from pydantic import BaseModel from fastapi import APIRouter from fastapi_responseschema import AbstractResponseSchema , SchemaAPIRoute T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool message : Optional [ str ] ... # constructors etc. class Item ( BaseModel ): id : int name : str additional_desc : Optional [ str ] class MainAPIRoute ( SchemaAPIRoute ): response_schema = ResponseSchema router = APIRouter ( route_class = MainAPIRoute ) @router . get ( \"/item\" , response_model = Item ) def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } The resulting response payload of GET /items will be: { \"data\" : { \"id\" : 11 , \"name\" : \"Just a Teapot!\" , \"additional_desc\" : null }, \"error\" : false , \"message\" : null } When applying the response_model_exclude and additional_model_include for the response_model remeber to consider the nested output. For Example: ... @router . get ( \"/item\" , response_model = Item , response_model_exclude = { \"data\" : { \"name\" }}) # Exclusion of nested fields def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } Returns: { \"data\" : { \"id\" : 11 , \"additional_desc\" : null }, \"error\" : false , \"message\" : null } When you use response_model_exclude_none and similar parameters the configuration will be applyed to all the response schema. For example: ... @router . get ( \"/item\" , response_model = Item , response_model_exclude_none = True ) # Exclusion of nested fields def show_item (): return { \"id\" : 11 , \"name\" : \"Just a Teapot!\" } Returns: { \"data\" : { \"id\" : 11 , \"name\" : \"Just a Teapot!\" }, \"error\" : false } To modify the response content you should prefer the definition of dedicated models.","title":"About response_model_exclude, response_model_include and others response_model_* parametrs"},{"location":"guide/schemas/","text":"Response schemas heavily rely on the concept of pydantic GenericModel . In this way response_model can be wrapped by the ResponseSchema in the fastapi operation. ResponseSchema will wrap your response ONLY if you configured a response_model in your route operation. In order to create a response schema you need to make the class a Generic type. from typing import TypeVar , Generic from fastapi_responseschema import AbstractResponseSchema T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): ... Constructors When creating a response schema, constructors must be defined in subclass to ensure that the final response model gets correctly created and additional metadata can be passed to the final response. AbstractResponseSchema.from_exception This constructor wraps the final response from an exception handler . You can view the full parameter list here . AbstractResponseSchema.from_api_route This constructor wraps the final response when initializing an APIRoute . You can view the full parameter list here . from typing import TypeVar , Generic from fastapi_responseschema import AbstractResponseSchema T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool message : str @classmethod def from_exception ( cls , reason : T , status_code : int , message : str = \"Error\" , ** others ): # from an exception handler return cls ( data = reason , error = status_code >= 400 , message = message ) @classmethod def from_api_route ( cls , content : T , status_code : int , description : Optional [ str ] = None , ** others ): # from an api route return cls ( data = content , error = status_code >= 400 , description = description ) Multiple response schemas can be built and composed in SchemaAPIRoute subclasses.","title":"Schemas"},{"location":"guide/schemas/#constructors","text":"When creating a response schema, constructors must be defined in subclass to ensure that the final response model gets correctly created and additional metadata can be passed to the final response.","title":"Constructors"},{"location":"guide/schemas/#abstractresponseschemafrom_exception","text":"This constructor wraps the final response from an exception handler . You can view the full parameter list here .","title":"AbstractResponseSchema.from_exception"},{"location":"guide/schemas/#abstractresponseschemafrom_api_route","text":"This constructor wraps the final response when initializing an APIRoute . You can view the full parameter list here . from typing import TypeVar , Generic from fastapi_responseschema import AbstractResponseSchema T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool message : str @classmethod def from_exception ( cls , reason : T , status_code : int , message : str = \"Error\" , ** others ): # from an exception handler return cls ( data = reason , error = status_code >= 400 , message = message ) @classmethod def from_api_route ( cls , content : T , status_code : int , description : Optional [ str ] = None , ** others ): # from an api route return cls ( data = content , error = status_code >= 400 , description = description ) Multiple response schemas can be built and composed in SchemaAPIRoute subclasses.","title":"AbstractResponseSchema.from_api_route"},{"location":"guide/utilities/","text":"Additional metadata in the resulting response schema If you need to add fields to the response schema that are not supported by AbstractResponseSchema.from_api_route , you can use the respond function. # schemas.py file from typing import TypeVar , Generic from fastapi_responseschema import AbstractResponseSchema T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool code : str # From a `result_code` field, not natively supported by constructors @classmethod def from_exception ( cls , reason : T , status_code : int , result_code : str = \"Error\" , ** others ): return cls ( data = reason , error = status_code >= 400 , code = result_code ) @classmethod def from_api_route ( cls , content : T , status_code : int , result_code : Optional [ str ] = None , ** others ): return cls ( data = content , error = status_code >= 400 , code = result_code ) ... # api.py file from fastapi import APIRouter from fastapi_responseschema import respond from .schemas import StandardAPIRoute # the SchemaAPIRoute you defined router = APIRouter ( route_class = StandardAPIRoute ) class ParrotMessage ( BaseModel ): message : str @router . post ( \"/parrot\" ) def repeat ( body : ParrotMessage ): return respond ({ \"parrot_says\" : body . message }, result_code = \"OK_PARROT_HEALTHY\" ) In a similar way, for fields that are not supported in AbstractResponseSchema.from_exception you can raise an exception with metadata: from fastapi_responseschema.exceptions import GenericHTTPException ... @router . get ( \"/faulty\" ) def repeat (): raise GenericHTTPException ( status_code = 405 , detail = \"This is a faulty service\" , result_code = \"KO_NOT_SUPPORTED\" ) Exceptions When developing a backend service usually we keep raising the same few excpetions with the same status code. You can use the exceptions module to reduce a little bit the boilerplate code. from fastapi_responseschema.exceptions import MethodNotAllowed , Gone , NotFound ... @router . get ( \"/faulty\" ) def repeat (): raise MethodNotAllowed ( detail = \"This is a faulty service\" , result_code = \"KO_NOT_SUPPORTED\" ) @router . get ( \"/ghost\" ) def ghost (): raise Gone ( detail = \"This resource is gone, forever.\" , result_code = \"KO_CREEPY_GONE\" ) @router . get ( \"/nope\" ) def ghost (): raise NotFound ( detail = \"Nope man, can't help you\" , result_code = \"KO_NOT_FOUND\" )","title":"Utilities"},{"location":"guide/utilities/#additional-metadata-in-the-resulting-response-schema","text":"If you need to add fields to the response schema that are not supported by AbstractResponseSchema.from_api_route , you can use the respond function. # schemas.py file from typing import TypeVar , Generic from fastapi_responseschema import AbstractResponseSchema T = TypeVar ( \"T\" ) class ResponseSchema ( AbstractResponseSchema [ T ], Generic [ T ]): data : T error : bool code : str # From a `result_code` field, not natively supported by constructors @classmethod def from_exception ( cls , reason : T , status_code : int , result_code : str = \"Error\" , ** others ): return cls ( data = reason , error = status_code >= 400 , code = result_code ) @classmethod def from_api_route ( cls , content : T , status_code : int , result_code : Optional [ str ] = None , ** others ): return cls ( data = content , error = status_code >= 400 , code = result_code ) ... # api.py file from fastapi import APIRouter from fastapi_responseschema import respond from .schemas import StandardAPIRoute # the SchemaAPIRoute you defined router = APIRouter ( route_class = StandardAPIRoute ) class ParrotMessage ( BaseModel ): message : str @router . post ( \"/parrot\" ) def repeat ( body : ParrotMessage ): return respond ({ \"parrot_says\" : body . message }, result_code = \"OK_PARROT_HEALTHY\" ) In a similar way, for fields that are not supported in AbstractResponseSchema.from_exception you can raise an exception with metadata: from fastapi_responseschema.exceptions import GenericHTTPException ... @router . get ( \"/faulty\" ) def repeat (): raise GenericHTTPException ( status_code = 405 , detail = \"This is a faulty service\" , result_code = \"KO_NOT_SUPPORTED\" )","title":"Additional metadata in the resulting response schema"},{"location":"guide/utilities/#exceptions","text":"When developing a backend service usually we keep raising the same few excpetions with the same status code. You can use the exceptions module to reduce a little bit the boilerplate code. from fastapi_responseschema.exceptions import MethodNotAllowed , Gone , NotFound ... @router . get ( \"/faulty\" ) def repeat (): raise MethodNotAllowed ( detail = \"This is a faulty service\" , result_code = \"KO_NOT_SUPPORTED\" ) @router . get ( \"/ghost\" ) def ghost (): raise Gone ( detail = \"This resource is gone, forever.\" , result_code = \"KO_CREEPY_GONE\" ) @router . get ( \"/nope\" ) def ghost (): raise NotFound ( detail = \"Nope man, can't help you\" , result_code = \"KO_NOT_FOUND\" )","title":"Exceptions"}]}